/* Even Fibonacci numbers
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 *
 *                        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms. */
#include<iostream>

void simpleSolution();
void betterSolution();
void evenBetterSolution();

int limit = 4000000;

int main() {
    simpleSolution();
    betterSolution();
    evenBetterSolution();
}

void simpleSolution() {
    int prev1 = 1;
    int prev2 = 2;
    int current_num = prev1 + prev2;
    int sum_of_even = 2;


    while( current_num <= limit ){
        if( current_num%2 == 0 )
            sum_of_even += current_num;
        prev1 = prev2;
        prev2 = current_num;
        current_num = prev1 + prev2;
    }
    std::cout << "result: " << sum_of_even << std::endl;
}
void betterSolution() {
    // solution based on the following pattern (odd, odd, even)
    // 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, ...
    // O  O  O  O  E   O   O   E   O   O    E    O    O    E
    int prev1 = 3;
    int prev2 = 5;
    int current_num = prev1 + prev2;    // start on 8
    int sum_of_even = 2;                // start with 2 from sequence


    while( current_num <= limit ){
        // add even number
        sum_of_even += current_num;

        // find next even number after 2 odds
        // odd
        prev1 = prev2;
        prev2 = current_num;
        current_num = prev1 + prev2;

        // odd
        prev1 = prev2;
        prev2 = current_num;
        current_num = prev1 + prev2;

        // even
        prev1 = prev2;
        prev2 = current_num;
        current_num = prev1 + prev2;
    }
    std::cout << "result: " << sum_of_even << std::endl;
}
void evenBetterSolution() {
    // This solution comes from the overview.
    // Based on the fact that E(n) = 4*E(n-1) + E(n-2)
    int prev1 = 2;
    int prev2 = 8;
    int current_num = prev1 + 4*prev2;
    int sum_of_even = prev1 + prev2;

    while(current_num <= limit) {
        sum_of_even += current_num;

        prev1 = prev2;
        prev2 = current_num;
        current_num = prev1 + 4*prev2;
    }
    std::cout << "result: " << sum_of_even << std::endl;
}
