/* Pentagon number
 * Pentagonal numbers are generated by the formula,
 * Pn=n(3n−1)/2. The first ten pentagonal numbers are:
 *
 *          1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
 *
 * It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However,
 * their difference, 70 − 22 = 48, is not pentagonal.
 *
 * Find the pair of pentagonal numbers, Pj and Pk, for which
 * their sum and difference are pentagonal and D = |Pk − Pj|
 * is minimised; what is the value of D? */

#include <iostream>
#include <vector>
#include <algorithm>

std::vector<unsigned> fillPentNums(unsigned limit);

int main() {
    const auto limit = 500u;
    std::vector<unsigned> pentNums = fillPentNums(limit);
    auto end = pentNums.end();
    auto result = 0u;

    bool foundValidPair = false;
    auto idx1 = 1u;
    do {
        auto idx2 = 0u;
        do {
            auto sum  = pentNums[idx1] + pentNums[idx2];
            auto diff = pentNums[idx1] - pentNums[idx2];

            auto it1 = std::find(pentNums.begin(),pentNums.end(),sum);
            auto it2 = std::find(pentNums.begin(),pentNums.end(),diff);

            if( it1!=end && it2!=end ) {
                result = diff;
                foundValidPair = true;
            }
        } while( !foundValidPair && ++idx2 <= idx1 );
    } while( !foundValidPair && ++idx1<limit );
    std::cout << "result: " << result << std::endl;
}

std::vector<unsigned> fillPentNums(unsigned limit) {
    std::vector<unsigned> nums;
    for( auto i=1u; i<=limit; ++i )
        nums.push_back( i * (3*i-1) / 2 );
    return nums;
}